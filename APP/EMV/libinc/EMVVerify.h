
#ifndef			_EMVVERIFY_H
#define			_EMVVERIFY_H

#ifndef			EMVVERIFY_DATA
#define			EMVVERIFY_DATA		extern
#endif

#include	<TypeDef.h>
#ifdef __cplusplus
extern "C" {
#endif



#define			EMVVERIFYERR_SUCCESS				0
#define			EMVVERIFYERR_FAIL					1
#define			EMVVERIFYERR_PLAINPIN				2
#define			EMVVERIFYERR_ONLINEENPIN			3
#define			EMVVERIFYERR_PLAINPINANDSIGN		4
#define			EMVVERIFYERR_ENCIPHERPIN			5
#define			EMVVERIFYERR_ENCIPHERPINANDSIGN 6
#define			EMVVERIFYERR_SIGN					7
#define			EMVVERIFYERR_NOCVM				8
#define			EMVVERIFYERR_NOTMATCH				9
#define			EMVVERIFYERR_PARAM				10
#define			EMVVERIFYERR_MALFUNCTION			11
#define			EMVVERIFYERR_BYPASS				12
#define			EMVVERIFYERR_PINBLOCKED			13
#define			EMVVERIFYERR_LIMITEXCEEDED       14
#define			EMVVERIFYERR_CANCEL				15
#define			EMVVERIFYERR_PINNOTPRESENT		16
#define			EMVVERIFYERR_REVERIFY				17
#define			EMVVERIFYERR_ICCCOMMAND			18
#define			EMVVERIFYERR_UNRECOGNISED		19
#define			EMVVERIFYERR_ICCDATA				20
#define			EMVVERIFYERR_CONDITION			21
#define			EMVVERIFYERR_IDCARD				22	
#define			EMVVERIFYERR_CVMNOTSUPPORT		23

typedef		enum {CVM_FAIL=0,CVM_PLAINPIN,CVM_ONLINEENCIPHERPIN,CVM_PLAINPINANDSIGN,CVM_ENCIPHER,
					CVM_ENCIPHERANDSIGN,CVM_SIGNATURE=0x1E,CVM_NOCVM=0x1F,CVM_IDCARD} CVMMETHODCODE;

typedef		enum {CONDITION_ALWAYS=0,CONDITION_UNATTENDCASH,CONDITION_NOTUHATTENDCASH,CONDITION_SUPPORTCVM,
	                CONDITION_MANUCASH,CONDITION_PURCASHBACK,CONDITION_UNDERX,CONDITION_OVERX,CONDITION_UNDERY,
	                CONDITION_OVERY} CONDITION;

#define			CVMRESULT_UNKNOWN			0x00
#define			CVMRESULT_FAILED			0x01
#define			CVMRESULT_SUCCESSFUL  	0x02

typedef		struct
{
	UCHAR	ucCVMCode;
	UCHAR	ucConditionCode;
	UCHAR	ucCVMResult;
		
}CVMRESULT;

EMVVERIFY_DATA 	UINT	CVM_X,CVM_Y;
EMVVERIFY_DATA	UCHAR	CVMPerformNums;
UCHAR	EMVVERIFY_PlainPIN();
UCHAR	EMVVERIFY_EncipherOnlinePIN(void);
UCHAR	EMVVERIFY_Signature(void);
BOOL	EMVVERIFY_CheckICCPinDataObject(void);
UCHAR	EMVVERIFY_ICCPinPKRecovery(void);
UCHAR	EMVVERIFY_ChooseICCPinPK(void);
UCHAR	EMVVERIFY_EncipherOfflinePIN(void);
UCHAR	EMVVERIFY_CVMProcess(CVMMETHODCODE enCVMMethodCode,CONDITION enCondition);
UCHAR	EMVVERIFY_Process(void);
UCHAR	EMVVERIFY_IDCardVerify(void);
void	EMVVERIFY_RandNumGen(PUCHAR	pRandBuff,UCHAR ucMaxLengh);


#ifdef __cplusplus
}
#endif
#endif




