#ifndef _MSG_H
#define	_MSG_H

#define MSG_INVALIDMSGEN		"Invalid Index\0"

enum
{
   PARAM_ANSWER_LEN =	2,
   MAX_DISPLAY_LARGE_CHAR = 50,   
   REPORT_MSG_BUFFER_LENGTH = 100
};

typedef enum MSG_TAB_INDEX
{
	MSG_NULL = 0,  
	LOGONCREDIT_SUCCESS,
	PULL_CARD,
	COLLECT_SUCCESS,
	PULLCARD_OUT,
	TRY_AGAIN,
	TIP_CASHNEED,
	SENDSTATS_SUCCESS,
	ECHO_SUCCESS,
	EMVDOWNLOAD_OK,
	EMV_LOAD_OK,
	CLEAR_SUCCESS,
	CLEAR_TRANS_SUCCESS,
	RS232_INITSUCCESS,
	SAV_SUCCESS,
	TRANS_SUCCESS,
	DELETE_BIN_SUCCESSFULLY,
	ADD_BIN_SUCCESSFULLY,	
    CLEAN_OK,
	RECOVER_OK,
	TIP_ADJUSTMENT_OK,
	ADD_USER_OK,
	DELETE_USER_OK,
	CHANGE_PASSWORD_OK,  
	PASSWD_RECOVERY_OK,
	TIME_OUT,
	LOGON_SUCCESS,
    TRANSACTION_SUCCESS,
	LOGOFF_SUCCESS,
	INITIAL_ONLINE_SUCCESS,
    DOWNLOAD_INFORMATION_OK,
    PASSWORD_MISMATCHING,
    INCOMPLETE_INFORMATION,
    NO_PERMISSION,
    WRONG_EXP,

    MSG_MAXNB

}MsgTabIndex;

typedef enum LINEEDIT_ERR_INDEX
{
   MID_INVALID  = 1,
   MNAME_INVALID,
   TID_INVALID,
   TRACE_INVALID,
   BATCH_INVALID,
   TRANSMAX_INVALID,
   TPDU_INVALID,
   TIMEOUT_INVALID,
   DIALRETRY_INVALID,
   SWITCHBOARD_INVALID,
   TEL_INVALID,
   PORT_INVALID,
   IP_INVALID,
   APN_INVALID,
   TIPFEERATE_INVALID,
   CURRENCYRATE_INVALID,
   TRANSRETRY_INVALID,
   ANTOSENDSUM_INVALID,
   TERMTYPE_INVALID,
   KEYINDEX_INVALID,
   TMKEYINPUT_INVALID,

   REGULAR_INVALID,
   PININPUT_INVALID,
   AMOUNT_INVALID,

   UNKNOW_INVALID

}LineErrIndex;


typedef enum ERR_INDEX
{
  /*SUCCESS		 			= 0x00,	//交易成功*/
    SUCCESS_TRACKDATA               = 0x00,
    ERR_END							= 0x01,
	ERR_CANCEL						= 0x02,
	ERR_DRIVER						= 0x03,
    ERR_READWRITECARD               = 0x04,
	ERR_OSFUNC						= 0x05,
	ERR_NOTPROC						= 0x06,
	ERR_AMOUNT						= 0x07,
	ERR_SYSPASS						= 0x08,
    ERR_DIAL						= 0x09,
	ERR_HOSTCODE					= 0x0A,
    ERR_DATAINVALID                 = 0x0B,
    ERR_INVALIDXDATAPAGE            = 0x0C,
	ERR_INITCARD					= 0x0D,
    ERR_TRANSFILEFULL               = 0x0E,

    ERR_NOTVALIDPSAM                = 0x10,
	ERR_NOTLOGON					= 0x11,
	ERR_NOTINIT						= 0x12,
	ERR_INBLACKLIST				= 0x13,
	ERR_NOTINZONE					= 0x14,
	ERR_NOTRANS						= 0x15,
	ERR_TERMINALID				= 0x16,
	ERR_CARDNOFUN					= 0x17,
	ERR_OVERAMOUNT				= 0x18,
	ERR_ZONECODE					= 0x19,
	ERR_TRACENO						= 0x1A,
	ERR_CARDUNTREAT				= 0x1B,
	ERR_LOCKEDCARD				= 0x1C,
	ERR_CARDRECYCLE				= 0x1D,
	ERR_EXPIREDATE				= 0x1E,
	ERR_CODE							= 0x1F,

	ERR_CARDWRITE					= 0x20,
	ERR_CARD							= 0x21,
	ERR_CARDSTATUS				= 0x22,
	ERR_NOTCASHIERLOGON		= 0x23,
	ERR_ALREADYVOID				= 0x24,
	ERR_CARDSUPPORT				= 0x25,
	ERR_DIFPT							= 0x26,
	ERR_ONLINECARD				= 0x27,
	ERR_CARDTYPE					= 0x28,
	ERR_AMOUNTNOTZERO			= 0x29,
	ERR_DISCOUNT					= 0x2A,
	ERR_CARDMACERROR			= 0x2B,
	ERR_HANDNOPROC				= 0x2C,
	ERR_NOPSAM						= 0x2D,
	ERR_DIFFCARDTYPE			= 0x2E,
	ERR_AMOUNTERR					= 0x2F,

	ERR_TRANSTIMEOUT			= 0x31,
	ERR_EXPNOFEE					= 0x32,
	ERR_EXPNOPARAM				= 0x33,
	ERR_OFFLINECARD				= 0x34,

	ERR_READMEMORY				= 0x41,
	ERR_WRITEMEMORY				= 0x42,
	ERR_CHECKSECRET				= 0x43,
	ERR_MODIFYSECRET			= 0x44,
	ERR_CARDLOCK					= 0x45,
	ERR_CARDCRC						= 0x46,
	ERR_MAXBLACK					= 0x47,
	ERR_MAXCARDTABLE			= 0x48,
	ERR_MAXZONE						= 0x49,
	ERR_MAXRATE						= 0x4A,
	ERR_CARDAMOUNTCRC			= 0x4B,

	ERR_NOTSAFT						= 0x50,
	ERR_FILENOTFOUND			= 0x51,
	ERR_RECORDNOTFOUND		= 0x52,
	ERR_NOTSUCHAPP				= 0x53,
	ERR_FULLCOUNT					= 0x54,
    ERR_NOKEYINDEX				= 0x55,
	ERR_MACERROR					= 0x56,
	ERR_CASENOTFULL				= 0x57,
	ERR_UNKNOWOPERATCODE	= 0x58,
	ERR_DETAILDIF					= 0x59,
	ERR_MEDIADIFFRENT			= 0x5A,
	ERR_NOTDRIVERCARD			= 0x5B,
	ERR_PACKERROR					= 0x5C,
	ERR_DEVALCARD					= 0x5D,
	ERR_TRANSERROR				= 0x5E,
	ERR_NOTINSYS					= 0x5F,

	ERR_DISTRUST					= 0x60,
	ERR_KEYVERIFY					= 0x61,
	ERR_NOTUNACT					= 0x62,
	ERR_CASH_EXIST				= 0x63,
	ERR_CASH_NOTEXIST			= 0x64,
	ERR_CASH_PASS					= 0x65,
	ERR_CASH_FILEFULL			= 0x66,
	ERR_CASH_NOTLOGON			= 0x67,
	ERR_CASH_ALREADYLOGON	= 0x68,
	ERR_UNKNOWTRANSTYPE		= 0x69,
	ERR_PINPADVERSION			= 0x6A,
	ERR_MAXTESTAMOUNT			= 0x6B,
	ERR_TESTTRANSFER			= 0x6C,

    ERR_LESSBALANCE				= 0x72,
    ERR_KEYDRV                  = 0x73,
    ERR_ICCDRV                  = 0x74,
    ERR_MFCDRV                  = 0x75,
    ERR_MAGDRV                  = 0x76,
    ERR_UNKNOWNDRV              = 0x77,
    ERR_TIMEOUT                 = 0x78,

	ERR_ISO83							= 0x80,
	ERR_ISO8583_INVALIDVALUE		= 0x81,
	ERR_ISO8583_INVALIDBIT			= 0x82,
	ERR_ISO8583_INVALIDPACKLEN	= 0x83,
	ERR_ISO8583_OVERBITBUFLIMIT	= 0x84,
	ERR_ISO8583_BITNOTEXIST			= 0x85,
	ERR_ISO8583_INVALIDPARAM		= 0x86,
	ERR_ISO8583_NODATAPACK			= 0x87,
    ERR_ISO8583_OVERBUFLIMIT		= 0x88,
	ERR_ISO8583_INVALIDBITATTR	= 0x89,
	ERR_ISO8583_UNPACKDATA			= 0x8A,
	ERR_ISO8583_SETBITLEN				= 0x8B,
	ERR_ISO8583_COMPARE					= 0x8C,
    ERR_ISO8583_MACERROR				= 0x8D,
	ERR_ISO8583_INVALIDLEN			= 0x8E,
	ERR_VOIDDEPOSITAMOUNT	    	= 0x8F,

	ERR_NOFUNCTION    					= 0x90,
	ERR_DIFFERENT_AMOUNT				= 0x91,
    ERR_XFILE_WRITE                     = 0x92,
    ERR_COMMUNICATION                   = 0x93,
    ERR_NO_SETTLE                       = 0x94,
    ERR_SQLITE3                         = 0x95,

    ERR_UTIL_OVERBUFLIMIT				= 0xA0,

	ERR_MSG_INVALIDINDEX				= 0xB0,
	ERR_MSG_INVALIDVALUE				= 0xB1,
    ERR_RECYCLE							= 0xB2,
    ERR_MAG_TRACKDATA					= 0xC0,
	ERR_TRANS_CARDTYPE					= 0xCA,
	ERR_COMMS_SENDCHAR					= 0xD0,
	ERR_COMMS_RECVCHAR					= 0xD1,
	ERR_COMMS_PROTOCOL					= 0xD2,
    ERR_COMMS_RECVBUFFOVERLIMIT         = 0xD3,
	ERR_COMMS_RECVTIMEOUT				= 0xD4,
    ERR_COMMS_LRC						= 0xD5,
    ERR_COMMS_ERRTPDU					= 0xD6,
    ERR_COMMS_NOMAC						= 0xD7,
    ERR_WORKSWITCH						= 0xD8,
    ERR_MUSTRETURN						= 0xD9,
    ERR_SAMECARD						= 0xDA,
    ERR_TRANSEMPTY						= 0xE6,
    ERR_SETTLE_FIRST					= 0xE7,
    ERR_SETTLE_UNBALANCE                = 0xE8,
	ERR_DIFFERENT_TERM					= 0xE9,
	ERR_DIFFERENT_TIME					= 0xEA,
	ERR_DIFFERENT_TRACE					= 0xEB,
	ERR_DIFFERENT_MONEY					= 0xEC,
	ERR_DIFFERENT_BALANCE				= 0xED,
    ERR_BAR_REPEAT						= 0xEF,
    ERR_CARDNOACT						= 0xF0,

    ERR_TRANS                           = 0xFF
}ErrIndex;

typedef enum FILE_ERR_INDEX
{
	FILE_ERROR_INDEX			= 0x01,
	FILE_ERROR_PARAM			= 0x02,
	FILE_ERROR_AREA				= 0x03,
	FILE_ERROR_NO_EXIST			= 0x04,
	FILE_ERROR_NOMORE_MEMORY	= 0x05,
	FILE_ERROR_WRITE			= 0x0A,
	FILE_ERROR_OPERTATE			= 0x0B,
	FILE_ERROR_HANDLEOPEN		= 0x0C,
	FILE_ERROR_CURSOR			= 0x0D,
	FILE_ERROR_ATTR				= 0x0E,
	FILE_ERROR_NAME				= 0x0F,
	FILE_ERROR_SYSTEM			= 0xFF
}FileErrIndex;

typedef enum COMMS_ERR_INDEX
{
	NET_PATTERN_ERROR				= 0x20,
	NET_NO_IDLE_DIALOG				= 0x01,
	NET_ID_ERROR					= 0x02,
	NET_ID_NOT_OPEN					= 0x03,
	NET_DIAL_CONNECT_ERROR			= 0x04,
	NET_DIAL_CONNECT_REJECT			= 0x05,
	NET_PARAM_ERROR					= 0x06,
	NET_IP_CATEGORY_ERROR			= 0x07,
	NET_DATA_CHECK_ERROR			= 0x08,
	NET_NO_MATCH_DIALOG				= 0x09,
	NET_TAG_ERROR					= 0x0A,
	NET_NO_MATCH_SERIES_NUMBER		= 0x0B,
	NET_SEND_DATA_LEN_ERROR			= 0x0C,
	NET_REVIEVE_OVERTIME			= 0x0D,
	NET_NO_ANSWER					= 0x0E,
	NET_DIAL_OVERTIME				= 0x0F,
	NET_REVIEVE_DATA_LEN_ERROR		= 0x7A,
	NET_NETCOMMS_VERSION		= 0x90,
	NET_NETCOMMS_OVERBUFLIMIT		= 0x91,
	NET_NETCOMMS_INDEXERROR		= 0x92,
	NET_NETCOMMS_MACERROR		= 0x93,
	ERR_COMMS_UNKNOW				= 0xff
}CommsErrIndex;

typedef enum COM_PISO_INDEX
{
    COMP_ERROR_CODE,
    COMP_ERROR_AMOUNT,
    COMP_ERROR_TRANS_NO,
    COMP_ERROR_MESSAGE,
    COMP_ERROR_TID,
    COMP_ERROR_MID,
    COMP_ERROR_PCODE,
    COMP_ERROR_COMPARE
}ComPisoIndex;

typedef enum HOST_ERR_INDEX
{
    HOSTERR_1	= 1,
    HOSTERR_2	= 2,
    HOSTERR_3	= 3,
    HOSTERR_4	= 4,
    HOSTERR_5	= 5,
    HOSTERR_6	= 6,
    HOSTERR_7	= 7,
    HOSTERR_9	= 9,
    HOSTERR_10	= 10,
    HOSTERR_11	= 11,
    HOSTERR_12	= 12,
    HOSTERR_13	= 13,
    HOSTERR_14	= 14,
    HOSTERR_15	= 15,
    HOSTERR_19	= 19,
    HOSTERR_20	= 20,
    HOSTERR_21	= 21,
    HOSTERR_22	= 22,
    HOSTERR_23	= 23,
    HOSTERR_25	= 25,
    HOSTERR_30	= 30,
    HOSTERR_31	= 31,
    HOSTERR_33	= 33,
    HOSTERR_34	= 34,
    HOSTERR_35	= 35,
    HOSTERR_36	= 36,
    HOSTERR_37	= 37,
    HOSTERR_38	= 38,
    HOSTERR_39	= 39,
    HOSTERR_40	= 40,
    HOSTERR_41	= 41,
    HOSTERR_42	= 42,
    HOSTERR_43	= 43,
    HOSTERR_44	= 44,
    HOSTERR_51	= 51,
    HOSTERR_52	= 52,
    HOSTERR_53	= 53,
    HOSTERR_54	= 54,
    HOSTERR_55	= 55,
    HOSTERR_56	= 56,
    HOSTERR_57	= 57,
    HOSTERR_58	= 58,
    HOSTERR_59	= 59,
    HOSTERR_60	= 60,
    HOSTERR_61	= 61,
    HOSTERR_62	= 62,
    HOSTERR_63	= 63,
    HOSTERR_64	= 64,
    HOSTERR_65	= 65,
    HOSTERR_66	= 66,
    HOSTERR_67	= 67,
    HOSTERR_68	= 68,
    HOSTERR_69	= 69,
    HOSTERR_70	= 70,
    HOSTERR_71	= 71,
    HOSTERR_72	= 72,
    HOSTERR_73	= 73,
    HOSTERR_74	= 74,
    HOSTERR_75	= 75,
    HOSTERR_76	= 76,
    HOSTERR_77	= 77,
    HOSTERR_78	= 78,
    HOSTERR_79	= 79,
    HOSTERR_80	= 80,
    HOSTERR_81	= 81,
    HOSTERR_82	= 82,
    HOSTERR_83	= 83,
    HOSTERR_84	= 84,
    HOSTERR_85	= 85,
    HOSTERR_86	= 86,
    HOSTERR_87	= 87,
    HOSTERR_88	= 88,
    HOSTERR_89	= 89,
    HOSTERR_90	= 90,
    HOSTERR_91	= 91,
    HOSTERR_92	= 92,
    HOSTERR_93	= 93,
    HOSTERR_94	= 94,
    HOSTERR_95	= 95,
    HOSTERR_96	= 96,
    HOSTERR_97	= 97,
    HOSTERR_98	= 98,
    HOSTERR_99	= 99,
    HOSTERR_100	= 100,
    HOSTERR_101	= 101,
    HOSTERR_102	= 102,
    HOSTERR_103	= 103,
    HOSTERR_104	= 104,
    HOSTERR_105	= 105,
    HOSTERR_106	= 106,
    HOSTERR_107	= 107,
    HOSTERR_255	= 255
}HostErrIndex;

typedef struct
{
	  unsigned char    aucMsg[REPORT_MSG_BUFFER_LENGTH];
}Msg;

typedef struct
{
    FileErrIndex     ucErrCode;
    unsigned char    aucErrMsg[REPORT_MSG_BUFFER_LENGTH];
}FileErrMsg;

typedef struct
{
    CommsErrIndex    ucErrCode;
    unsigned char    aucErrMsg[REPORT_MSG_BUFFER_LENGTH];
}CommsErrMsg;

typedef struct 
{
    LineErrIndex	 ucErrCode;
    unsigned char    aucErrMsg[REPORT_MSG_BUFFER_LENGTH];
}LineErrMsg;

typedef struct
{
    ErrIndex         ucErrCode;
    unsigned char    aucErrMsg[REPORT_MSG_BUFFER_LENGTH];
}SingleErrMsg;

typedef struct
{
    ComPisoIndex	 ucErrCode;
    unsigned char    aucErrMsg[REPORT_MSG_BUFFER_LENGTH];
}COMPISO;


typedef struct
{
    HostErrIndex     ucErrCode;
    unsigned char    aucErrMsg[REPORT_MSG_BUFFER_LENGTH];
}HostErrMsg;

typedef struct
{
    HostErrIndex     ucErrCode;
    unsigned char    aucErrMsg[REPORT_MSG_BUFFER_LENGTH];
}MifareErrMsg;







#endif	/* MSG_H_ */
